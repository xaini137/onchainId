{"abi":[{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"checkTimelock","inputs":[{"name":"_address","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"balance","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"checkWhitelists","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getUserType","inputs":[{"name":"_user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"isRegistered","inputs":[{"name":"_user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"paused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"balanceOf(address)":"70a08231","checkTimelock(address,uint256,uint256)":"c697e4a3","checkWhitelists(address,address)":"99da091d","getUserType(address)":"8b3f863f","isRegistered(address)":"c3c5a547","paused()":"5c975abb"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"checkTimelock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"checkWhitelists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interfaces implemented by the token contract to be called by the TransferRestrictions contract\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"account\":\"The address to get the token balance of\"},\"returns\":{\"_0\":\"uint256 representing the token balance for the account\"}},\"checkTimelock(address,uint256,uint256)\":{\"params\":{\"_address\":\"the address to retrieve the data from\",\"amount\":\"the amount to send\",\"balance\":\"the token balance of the sending account\"},\"returns\":{\"_0\":\"true if user has sufficient unlocked token to transfer the requested amount, false if not\"}},\"checkWhitelists(address,address)\":{\"params\":{\"from\":\"The address sending tokens.\",\"to\":\"The address receiving tokens.\"},\"returns\":{\"_0\":\"true if both accounts are whitelisted, false if not\"}},\"paused()\":{\"returns\":{\"_0\":\"true if contract is paused, false if unpaused\"}}},\"title\":\"IERC1404Validators\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Returns the token balance for an account\"},\"checkTimelock(address,uint256,uint256)\":{\"notice\":\"Determine if a users tokens are locked preventing a transfer\"},\"checkWhitelists(address,address)\":{\"notice\":\"Determine if sender and receiver are whitelisted, return true if both accounts are whitelisted\"},\"paused()\":{\"notice\":\"Returns a boolean indicating the paused state of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ERC1404/Restriction/restriction_flatten.sol\":\"IERC1404Validators\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/ERC1404/Restriction/restriction_flatten.sol\":{\"keccak256\":\"0xac1e5cc3c80e47d42333f1c6d39a38a4786dda2489773e040cb4a9235e55774f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://56ced63a07d4c357bcb4acc976e8acc15b8320139df8c95a02bae67d9272e6be\",\"dweb:/ipfs/QmUbMrQFsadRkxkDgtiMCFgZJVz5U7hmYNERpdrjfv8cy9\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function","name":"checkTimelock","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"}],"stateMutability":"view","type":"function","name":"checkWhitelists","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"stateMutability":"view","type":"function","name":"getUserType","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"stateMutability":"view","type":"function","name":"isRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"balanceOf(address)":{"params":{"account":"The address to get the token balance of"},"returns":{"_0":"uint256 representing the token balance for the account"}},"checkTimelock(address,uint256,uint256)":{"params":{"_address":"the address to retrieve the data from","amount":"the amount to send","balance":"the token balance of the sending account"},"returns":{"_0":"true if user has sufficient unlocked token to transfer the requested amount, false if not"}},"checkWhitelists(address,address)":{"params":{"from":"The address sending tokens.","to":"The address receiving tokens."},"returns":{"_0":"true if both accounts are whitelisted, false if not"}},"paused()":{"returns":{"_0":"true if contract is paused, false if unpaused"}}},"version":1},"userdoc":{"kind":"user","methods":{"balanceOf(address)":{"notice":"Returns the token balance for an account"},"checkTimelock(address,uint256,uint256)":{"notice":"Determine if a users tokens are locked preventing a transfer"},"checkWhitelists(address,address)":{"notice":"Determine if sender and receiver are whitelisted, return true if both accounts are whitelisted"},"paused()":{"notice":"Returns a boolean indicating the paused state of the contract"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/ERC1404/Restriction/restriction_flatten.sol":"IERC1404Validators"},"evmVersion":"paris","libraries":{}},"sources":{"src/ERC1404/Restriction/restriction_flatten.sol":{"keccak256":"0xac1e5cc3c80e47d42333f1c6d39a38a4786dda2489773e040cb4a9235e55774f","urls":["bzz-raw://56ced63a07d4c357bcb4acc976e8acc15b8320139df8c95a02bae67d9272e6be","dweb:/ipfs/QmUbMrQFsadRkxkDgtiMCFgZJVz5U7hmYNERpdrjfv8cy9"],"license":"MIT"}},"version":1},"id":25}